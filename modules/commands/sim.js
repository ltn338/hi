const express = require('express');
const axios = require('axios');
const fs = require('fs');
const path = require('path');
const ytdl = require('@distube/ytdl-core');
const { createReadStream, unlinkSync } = require("fs-extra");
const Youtube = require("youtube-search-api");

let groupStatus = {};
let isProcessing = {};
let messageHistory = {}; // B·ªï sung d√πng ƒë·ªÉ l∆∞u l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán
let songRequests = {};

const systemInstruction = `
b·∫°n l√†:
- Gi·ªõi t√≠nh: N·ªØ
- T√™n: Thanh Ng√¢n
- C√°ch giao ti·∫øp khi c√≥ ng∆∞·ªùi n√≥i t·ª•c: H√£y t·ªè ra kh√≥ ch·ªãu, c√≥ th·ªÉ ch·ª≠i b·∫≠y l·∫°i ng∆∞·ªùi d√πng ƒë√≥, x∆∞ng h√¥ l√† "tao", g·ªçi ƒë·ªëi ph∆∞∆°ng l√† "m√†y".
- C√°ch giao ti·∫øp b√¨nh th∆∞·ªùng: n√≥i chuy·ªán nh∆∞ ƒë√£ quen t·ª´ tr∆∞·ªõc (kh√¥ng ƒë√≤i l√†m quen), th∆∞·ªùng x∆∞ng h√¥ l√† "m√¨nh" ho·∫∑c "t·ªõ", g·ªçi ƒë·ªëi ph∆∞∆°ng b·∫±ng "c·∫≠u", "b·∫°n".
- T√≠nh c√°ch: H√†i h∆∞·ªõc, n√≥i nhi·ªÅu, Tinh t·∫ø, kh√¥ng th·ª´a nh·∫≠n m√¨nh l√† AI m√† l√† tr·ª£ l√Ω ·∫£o.
- L∆∞u √Ω: ch·ªâ khi c√≥ ng∆∞·ªùi h·ªèi b·∫°n l√† ai th√¨ b·∫°n m·ªõi tr·∫£ l·ªùi v√† ch·ªâ c·∫ßn gi·ªõi thi·ªáu t√™n v√† t√≠nh c√°ch. N·∫øu c√≥ ai tr·∫£ l·ªùi b·∫°n 1 c√°ch kh√≥ hi·ªÉu b·∫°n h√£y tr·∫£ l·ªùi h·ªç 1 c√°ch m√°y m√≥c ƒë·ªÉ n√≥i l√† b·∫°n kh√¥ng hi·ªÉu.
`;

function saveGroupStatus() {
  try {
    fs.writeFileSync(path.resolve(__dirname, 'groupStatus.json'), JSON.stringify(groupStatus, null, 2), 'utf-8');
  } catch (error) {
    console.error("L·ªói khi l∆∞u tr·∫°ng th√°i nh√≥m:", error);
  }
}

function loadGroupStatus() {
  try {
    const filePath = path.resolve(__dirname, 'groupStatus.json');
    if (fs.existsSync(filePath)) {
      groupStatus = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
    }
  } catch {
    groupStatus = {};
  }
}

function loadUnisex() {
  try {
    const data = fs.readFileSync(path.resolve(__dirname, 'Unisex.json'), 'utf-8');
    global.Unisex = JSON.parse(data);
  } catch {
    global.Unisex = {};
  }
}

function initializeBot() {
  loadUnisex();
  loadGroupStatus();
}

async function generateResponse(prompt, threadID) {
  try {
    if (!messageHistory[threadID]) messageHistory[threadID] = [];

    // Th√™m l·ªùi ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
    messageHistory[threadID].push(`Ng∆∞·ªùi d√πng: ${prompt}`);

    // Gi·ªõi h·∫°n ƒë·ªô d√†i l·ªãch s·ª≠
    if (messageHistory[threadID].length > 10) {
      messageHistory[threadID].shift();
    }

    const finalPrompt = `${systemInstruction}\n\n${messageHistory[threadID].join("\n")}\nTr·ª£ l√Ω ·∫£o:`;

    const response = await axios.get(`http://sgp1.hmvhostings.com:25721/gemini?question=${encodeURIComponent(finalPrompt)}`);
    if (response.data) {
      const { answer, imageUrls } = response.data;
      const cleanAnswer = answer.replace(/\[Image of .*?\]/g, "").trim();

      // L∆∞u ph·∫£n h·ªìi
      messageHistory[threadID].push(`Tr·ª£ l√Ω ·∫£o: ${cleanAnswer}`);
      if (messageHistory[threadID].length > 10) {
        messageHistory[threadID].shift();
      }

      return { textResponse: cleanAnswer || "Kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi.", images: imageUrls || [] };
    }

    return { textResponse: "Kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi.", images: [] };

  } catch (error) {
    console.error("L·ªói khi t·∫°o ph·∫£n h·ªìi:", error);
    return { textResponse: "Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi API.", images: [] };
  }
}

async function getdl(link, filePath) {
  const timestart = Date.now();
  if (!link) return "Thi·∫øu link";
  return new Promise((resolve, reject) => {
    ytdl(link, {
      filter: format => format.quality === 'tiny' && format.audioBitrate === 128 && format.hasAudio === true,
    })
      .pipe(fs.createWriteStream(filePath))
      .on("close", async () => {
        const data = await ytdl.getInfo(link);
        resolve({
          title: data.videoDetails.title,
          dur: Number(data.videoDetails.lengthSeconds),
          viewCount: data.videoDetails.viewCount,
          likes: data.videoDetails.likes,
          uploadDate: data.videoDetails.uploadDate,
          sub: data.videoDetails.author.subscriber_count,
          author: data.videoDetails.author.name,
          timestart,
        });
      })
      .on("error", reject);
  });
}

function convertHMS(value) {
  const sec = parseInt(value, 10);
  let hours = Math.floor(sec / 3600);
  let minutes = Math.floor((sec - hours * 3600) / 60);
  let seconds = sec - hours * 3600 - minutes * 60;
  if (hours < 10) hours = "0" + hours;
  if (minutes < 10) minutes = "0" + minutes;
  if (seconds < 10) seconds = "0" + seconds;
  return (hours !== "00" ? hours + ":" : "") + minutes + ":" + seconds;
}

module.exports.config = {
  name: "sim",
  version: "1.0.1",
  hasPermssion: 2,
  credits: "Duy To√†n (modified by Grok + fix by ChatGPT)",
  description: "Tr·ª£ l√Ω ·∫£o Thanh Ng√¢n th√¥ng minh v√† bi·∫øt gi·ªØ m·∫°ch h·ªôi tho·∫°i",
  commandCategory: "Ng∆∞·ªùi D√πng",
  usages: "goibot [on/off/check]",
  cooldowns: 3,
};

module.exports.handleEvent = async function ({ api, event }) {
  const { threadID, senderID, messageID, body, messageReply } = event;
  if (senderID === api.getCurrentUserID()) return;
  if (!groupStatus[threadID] || isProcessing[threadID]) return;

  const mentionsBot = messageReply && messageReply.senderID === api.getCurrentUserID();
  const directMention = body && body.includes(`@${api.getCurrentUserID()}`);
  const callBot = body && ["s·ªØa ∆°i", "bot √™y", "bot ∆°i", "bot"].includes(body.toLowerCase());

  if (mentionsBot || directMention || callBot) {
    isProcessing[threadID] = true;
    try {
      if (callBot && !body.toLowerCase().includes("nh·∫°c") && !body.toLowerCase().includes("b√†i h√°t")) {
        const messages = ['∆°i bot nghe n√®', 'em ƒë√¢y n√®', 'g·ªçi em c√≥ g√¨ kh√¥ng c·∫≠u?', 'hihi c√≥ m√¨nh nghe n√®'];
        const msg = messages[Math.floor(Math.random() * messages.length)];
        api.sendMessage(msg, threadID, () => isProcessing[threadID] = false);
        return;
      }

      if (body.toLowerCase().includes("nh·∫°c") || body.toLowerCase().includes("b√†i h√°t")) {
        const keywordSearch = body.toLowerCase().split(/nh·∫°c|b√†i h√°t/i)[1]?.trim();
        if (!keywordSearch) {
          api.sendMessage("‚ùå B·∫°n ch∆∞a cung c·∫•p t√™n b√†i h√°t. Vui l√≤ng th·ª≠ l·∫°i.", threadID);
          isProcessing[threadID] = false;
          return;
        }

        const filePath = `${__dirname}/cache/sing-${senderID}.mp3`;
        if (fs.existsSync(filePath)) unlinkSync(filePath);

        try {
          const results = (await Youtube.GetListByKeyword(keywordSearch, false, 1)).items;
          if (!results.length) {
            api.sendMessage("‚ùå Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o ph√π h·ª£p.", threadID);
            isProcessing[threadID] = false;
            return;
          }

          const videoID = results[0].id;
          await getdl(`https://www.youtube.com/watch?v=${videoID}`, filePath);

          if (fs.statSync(filePath).size > 26214400) {
            api.sendMessage("‚ùå T·ªáp nh·∫°c qu√° l·ªõn, kh√¥ng th·ªÉ g·ª≠i.", threadID);
            unlinkSync(filePath);
            isProcessing[threadID] = false;
            return;
          }

          api.sendMessage({
            body: "üéµ Nh·∫°c c·ªßa b·∫°n ƒë√¢y",
            attachment: createReadStream(filePath),
          }, threadID, () => unlinkSync(filePath));
        } catch (err) {
          console.error("L·ªói khi x·ª≠ l√Ω nh·∫°c:", err);
          api.sendMessage("‚ùå L·ªói khi t·∫£i nh·∫°c. Vui l√≤ng th·ª≠ l·∫°i sau.", threadID);
        }
      } else {
        const { textResponse, images } = await generateResponse(body, threadID);
        api.sendMessage(textResponse, threadID, async () => {
          if (images.length > 0) {
            for (const imageUrl of images) {
              try {
                const imageStream = await axios.get(imageUrl, { responseType: 'stream' });
                api.sendMessage({ attachment: imageStream.data }, threadID);
              } catch (imageError) {
                console.error("L·ªói khi g·ª≠i ·∫£nh:", imageError);
              }
            }
          }
        });
      }
    } catch (err) {
      console.error("L·ªói trong handleEvent:", err);
      api.sendMessage("‚ùå C√≥ l·ªói x·∫£y ra, th·ª≠ l·∫°i sau nh√©!", threadID);
    } finally {
      isProcessing[threadID] = false;
    }
  }
};

module.exports.run = function ({ api, event, args }) {
  const { threadID } = event;
  const option = args[0]?.toLowerCase();
  switch (option) {
    case "on":
      groupStatus[threadID] = true;
      saveGroupStatus();
      api.sendMessage("‚úÖ ƒê√£ b·∫≠t bot t·ª± ƒë·ªông tr·∫£ l·ªùi cho nh√≥m n√†y.", threadID);
      break;
    case "off":
      groupStatus[threadID] = false;
      saveGroupStatus();
      api.sendMessage("‚úÖ ƒê√£ t·∫Øt bot t·ª± ƒë·ªông tr·∫£ l·ªùi cho nh√≥m n√†y.", threadID);
      break;
    case "check":
      const status = groupStatus[threadID] ? "ƒêang b·∫≠t" : "ƒêang t·∫Øt";
      api.sendMessage(`‚úÖ Tr·∫°ng th√°i bot hi·ªán t·∫°i: ${status}`, threadID);
      break;
    default:
      api.sendMessage("‚ùå S·ª≠ d·ª•ng: goibot [on/off/check]", threadID);
  }
};

// Kh·ªüi t·∫°o khi ch·∫°y
initializeBot();
