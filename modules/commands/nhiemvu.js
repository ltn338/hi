module.exports.config = {
  name: "nhiemvu",
  version: "1.1.0",
  hasPermssion: 0,
  credits: "B·∫°n ho·∫∑c GPT ch·ªânh s·ª≠a",
  description: "Nhi·ªám v·ª• m·ªói ng√†y + reset m·ªói 5 ph√∫t",
  commandCategory: "game",
  usages: "[s·ªë nhi·ªám v·ª•]",
  cooldowns: 5,
};

const fs = require("fs");
const path = __dirname + "/cache/nhiemvu.json";

const defaultTask = [
  { id: 1, desc: "G·ª≠i 5 tin nh·∫Øn", reward: 1000, done: false, lastDone: 0 },
  { id: 2, desc: "Th·∫Øng 1 v√°n t√†i x·ªâu", reward: 3000, done: false, lastDone: 0 },
  { id: 3, desc: "Tr·∫£ l·ªùi ƒë√∫ng 1 c√¢u ƒë·ªë", reward: 2000, done: false, lastDone: 0 },
  { id: 4, desc: "G√µ l·ªánh /money", reward: 1500, done: false, lastDone: 0 }
];

function loadTasks(uid) {
  let data = {};
  if (fs.existsSync(path)) data = JSON.parse(fs.readFileSync(path));
  if (!data[uid]) data[uid] = JSON.parse(JSON.stringify(defaultTask));
  return data;
}

function saveTasks(uid, taskData) {
  let data = {};
  if (fs.existsSync(path)) data = JSON.parse(fs.readFileSync(path));
  data[uid] = taskData;
  fs.writeFileSync(path, JSON.stringify(data, null, 2));
}

module.exports.run = async ({ api, event, args }) => {
  const { threadID, messageID, senderID } = event;
  const uid = senderID;
  const now = Date.now();
  const cooldown = 5 * 60 * 1000; // 5 ph√∫t

  const fullData = loadTasks(uid);
  let tasks = fullData[uid];

  // Reset nhi·ªám v·ª• n·∫øu cooldown ƒë√£ qua
  tasks.forEach(task => {
    if (task.done && now - task.lastDone >= cooldown) {
      task.done = false;
      task.lastDone = 0;
    }
  });

  // Nh·∫≠n nhi·ªám v·ª•
  if (args[0]) {
    const taskNum = parseInt(args[0]);
    const task = tasks.find(t => t.id == taskNum);
    if (!task) return api.sendMessage("‚ùå Nhi·ªám v·ª• kh√¥ng t·ªìn t·∫°i!", threadID, messageID);

    if (task.done && now - task.lastDone < cooldown) {
      const waitTime = Math.ceil((cooldown - (now - task.lastDone)) / 60000);
      return api.sendMessage(`‚è≥ Nhi·ªám v·ª• n√†y ƒëang cooldown. Vui l√≤ng ch·ªù ${waitTime} ph√∫t n·ªØa ƒë·ªÉ l√†m l·∫°i.`, threadID, messageID);
    }

    task.done = true;
    task.lastDone = now;
    saveTasks(uid, tasks);
    return api.sendMessage(`üéâ B·∫°n ƒë√£ nh·∫≠n ${task.reward}$ t·ª´ nhi·ªám v·ª• "${task.desc}"`, threadID, messageID);
  }

  // Hi·ªÉn th·ªã danh s√°ch nhi·ªám v·ª•
  let msg = `üéØ ùó°ùóõùóúùóòÃ£ÃÇùó† ùó©ùó®Ã£ ùóõùó¢ÃÇùó† ùó°ùóîùó¨\n\n`;
  msg += `üìÖ Ng√†y: ${new Date().toLocaleDateString('vi-VN')}\nüßë‚Äçüíª ID: ${uid}\n`;
  msg += `üìå Danh s√°ch nhi·ªám v·ª•:\n`;
  tasks.forEach(task => {
    const remaining = task.done && (now - task.lastDone < cooldown)
      ? ` (‚è≥ c√≤n ${Math.ceil((cooldown - (now - task.lastDone)) / 60000)} ph√∫t)`
      : "";
    msg += `${task.done ? "‚úÖ" : "‚ùå"} ${task.id}. ${task.desc} (${task.reward}$)${remaining}\n`;
  });
  msg += `\nüì• D√πng ,nv [s·ªë] ƒë·ªÉ nh·∫≠n th∆∞·ªüng\nV√≠ d·ª•: ,nv 2`;

  saveTasks(uid, tasks);
  return api.sendMessage(msg, threadID, messageID);
};
